{
  "api/Aspectus.Aspectus.html": {
    "href": "api/Aspectus.Aspectus.html",
    "title": "Class Aspectus | Aspectus API Reference",
    "keywords": "Class Aspectus AOP interface manager Inheritance object Aspectus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Aspectus Assembly: Aspectus.dll Syntax public class Aspectus Constructors | Improve this Doc View Source Aspectus(Compiler, IEnumerable<IAspect>, IEnumerable<IAOPModule>) Initializes a new instance of the Aspectus class. Declaration public Aspectus(Compiler compiler, IEnumerable<IAspect> aspects, IEnumerable<IAOPModule> modules) Parameters Type Name Description Compiler compiler The compiler. IEnumerable<IAspect> aspects The aspects. IEnumerable<IAOPModule> modules The modules. | Improve this Doc View Source Aspectus(Compiler, IEnumerable<IAspect>, IEnumerable<IAOPModule>, ILogger<Aspectus>?, ObjectPool<StringBuilder>?) Initializes a new instance of the Aspectus class. Declaration public Aspectus(Compiler compiler, IEnumerable<IAspect> aspects, IEnumerable<IAOPModule> modules, ILogger<Aspectus>? logger, ObjectPool<StringBuilder>? objectPool) Parameters Type Name Description Compiler compiler The compiler. IEnumerable<IAspect> aspects The aspects. IEnumerable<IAOPModule> modules The modules. ILogger<Aspectus> logger Serilog based log object ObjectPool<StringBuilder> objectPool The object pool. Exceptions Type Condition ArgumentNullException logger Methods | Improve this Doc View Source Create(Type) Creates an object of the specified base type, registering the type if necessary Declaration public object? Create(Type baseType) Parameters Type Name Description Type baseType The base type Returns Type Description object Returns an object of the specified base type | Improve this Doc View Source Create<T>() Creates an object of the specified base type, registering the type if necessary Declaration public T Create<T>() Returns Type Description T Returns an object of the specified base type Type Parameters Name Description T The base type | Improve this Doc View Source FinalizeSetup() Cleans up items in this instance. Declaration public void FinalizeSetup() | Improve this Doc View Source Setup(params Assembly[]) Sets up all types from the assembly that it can Declaration public void Setup(params Assembly[] assemblies) Parameters Type Name Description Assembly[] assemblies Assembly to set up | Improve this Doc View Source Setup(params Type[]) Sets up a type so it can be used in the system later Declaration public void Setup(params Type[] types) Parameters Type Name Description Type[] types The types. | Improve this Doc View Source ToString() Outputs manager info as a string Declaration public override string ToString() Returns Type Description string String version of the manager Overrides object.ToString()"
  },
  "api/Aspectus.CodeGen.BaseClasses.CompilerBase.html": {
    "href": "api/Aspectus.CodeGen.BaseClasses.CompilerBase.html",
    "title": "Class CompilerBase | Aspectus API Reference",
    "keywords": "Class CompilerBase Compiler base class Inheritance object CompilerBase Compiler Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Aspectus.CodeGen.BaseClasses Assembly: Aspectus.dll Syntax public abstract class CompilerBase : IDisposable Constructors | Improve this Doc View Source CompilerBase(string, ObjectPool<StringBuilder>?) Constructor Declaration protected CompilerBase(string assemblyName, ObjectPool<StringBuilder>? objectPool = null) Parameters Type Name Description string assemblyName Assembly name to save the generated types as ObjectPool<StringBuilder> objectPool The object pool. Properties | Improve this Doc View Source AssemblyName Assembly name Declaration public string AssemblyName { get; } Property Value Type Description string | Improve this Doc View Source AssemblyStream Gets the assembly stream. Declaration protected MemoryStream? AssemblyStream { get; } Property Value Type Description MemoryStream The assembly stream. | Improve this Doc View Source Classes Dictionary containing generated types and associates it with original type Declaration public List<Type> Classes { get; } Property Value Type Description List<Type> | Improve this Doc View Source Optimize Should this be optimized? Declaration protected bool Optimize { get; } Property Value Type Description bool Methods | Improve this Doc View Source Add(string, IEnumerable<string>, params MetadataReference[]) Adds the specified code. Declaration protected CompilerBase Add(string code, IEnumerable<string> usings, params MetadataReference[] references) Parameters Type Name Description string code The code. IEnumerable<string> usings The usings. MetadataReference[] references The references. Returns Type Description CompilerBase This | Improve this Doc View Source Compile() Compiles this instance. Declaration public CompilerBase Compile() Returns Type Description CompilerBase This Exceptions Type Condition Exception Any errors that are sent back by Roslyn | Improve this Doc View Source Create<T>(Type, params object[]) Creates an object using the type specified Declaration protected static T Create<T>(Type typeToCreate, params object[] args) Parameters Type Name Description Type typeToCreate Type to create object[] args Args to pass to the constructor Returns Type Description T The created object Type Parameters Name Description T Type to cast to Exceptions Type Condition ArgumentNullException typeToCreate | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description bool managed true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source LoadAssembly() Loads the assembly into memory. Declaration public IEnumerable<Type> LoadAssembly() Returns Type Description IEnumerable<Type> The types within the assembly | Improve this Doc View Source ToString() Outputs basic information about the compiler as a string Declaration public override string ToString() Returns Type Description string The string version of the compiler Overrides object.ToString() Implements IDisposable"
  },
  "api/Aspectus.CodeGen.BaseClasses.html": {
    "href": "api/Aspectus.CodeGen.BaseClasses.html",
    "title": "Namespace Aspectus.CodeGen.BaseClasses | Aspectus API Reference",
    "keywords": "Namespace Aspectus.CodeGen.BaseClasses Classes CompilerBase Compiler base class"
  },
  "api/Aspectus.CodeGen.Compiler.html": {
    "href": "api/Aspectus.CodeGen.Compiler.html",
    "title": "Class Compiler | Aspectus API Reference",
    "keywords": "Class Compiler Compiler Inheritance object CompilerBase Compiler Implements IDisposable Inherited Members CompilerBase.AssemblyName CompilerBase.Classes CompilerBase.AssemblyStream CompilerBase.Optimize CompilerBase.Compile() CompilerBase.Dispose() CompilerBase.LoadAssembly() CompilerBase.ToString() CompilerBase.Create<T>(Type, params object[]) CompilerBase.Add(string, IEnumerable<string>, params MetadataReference[]) CompilerBase.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Aspectus.CodeGen Assembly: Aspectus.dll Syntax public class Compiler : CompilerBase, IDisposable Constructors | Improve this Doc View Source Compiler() Initializes a new instance of the Compiler class. Declaration public Compiler() | Improve this Doc View Source Compiler(ObjectPool<StringBuilder>?) Initializes a new instance of the Compiler class. Declaration public Compiler(ObjectPool<StringBuilder>? objectPool) Parameters Type Name Description ObjectPool<StringBuilder> objectPool The object pool. | Improve this Doc View Source Compiler(string) Constructor Declaration public Compiler(string assemblyName) Parameters Type Name Description string assemblyName Assembly name | Improve this Doc View Source Compiler(string, ObjectPool<StringBuilder>?) Constructor Declaration public Compiler(string assemblyName, ObjectPool<StringBuilder>? objectPool) Parameters Type Name Description string assemblyName Assembly name ObjectPool<StringBuilder> objectPool The object pool. Methods | Improve this Doc View Source Create(string, IEnumerable<string>, params MetadataReference[]) Compiles the specified code and returns the types that are created Declaration public Compiler Create(string code, IEnumerable<string> usings, params MetadataReference[] references) Parameters Type Name Description string code The code. IEnumerable<string> usings The usings. MetadataReference[] references The references. Returns Type Description Compiler The list of types that are generated Implements IDisposable"
  },
  "api/Aspectus.CodeGen.html": {
    "href": "api/Aspectus.CodeGen.html",
    "title": "Namespace Aspectus.CodeGen | Aspectus API Reference",
    "keywords": "Namespace Aspectus.CodeGen Classes Compiler Compiler"
  },
  "api/Aspectus.html": {
    "href": "api/Aspectus.html",
    "title": "Namespace Aspectus | Aspectus API Reference",
    "keywords": "Namespace Aspectus Classes Aspectus AOP interface manager"
  },
  "api/Aspectus.Interfaces.html": {
    "href": "api/Aspectus.Interfaces.html",
    "title": "Namespace Aspectus.Interfaces | Aspectus API Reference",
    "keywords": "Namespace Aspectus.Interfaces Interfaces IAOPModule AOP module interface IAspect Aspect interface"
  },
  "api/Aspectus.Interfaces.IAOPModule.html": {
    "href": "api/Aspectus.Interfaces.IAOPModule.html",
    "title": "Interface IAOPModule | Aspectus API Reference",
    "keywords": "Interface IAOPModule AOP module interface Namespace: Aspectus.Interfaces Assembly: Aspectus.dll Syntax public interface IAOPModule Methods | Improve this Doc View Source Setup(Aspectus) Used to add a class to the AOP system Declaration void Setup(Aspectus manager) Parameters Type Name Description Aspectus manager AOP manager"
  },
  "api/Aspectus.Interfaces.IAspect.html": {
    "href": "api/Aspectus.Interfaces.IAspect.html",
    "title": "Interface IAspect | Aspectus API Reference",
    "keywords": "Interface IAspect Aspect interface Namespace: Aspectus.Interfaces Assembly: Aspectus.dll Syntax public interface IAspect Properties | Improve this Doc View Source AssembliesUsing Set of assemblies that the aspect requires Declaration ICollection<MetadataReference> AssembliesUsing { get; } Property Value Type Description ICollection<MetadataReference> | Improve this Doc View Source InterfacesUsing List of interfaces that need to be injected by this aspect Declaration ICollection<Type> InterfacesUsing { get; } Property Value Type Description ICollection<Type> | Improve this Doc View Source Usings Using statements that the aspect requires Declaration ICollection<string> Usings { get; } Property Value Type Description ICollection<string> Methods | Improve this Doc View Source Setup(object) Used to hook into the object once it has been created Declaration void Setup(object value) Parameters Type Name Description object value Object created by the system | Improve this Doc View Source SetupDefaultConstructor(Type) Used to insert code into the default constructor Declaration string SetupDefaultConstructor(Type baseType) Parameters Type Name Description Type baseType Base type Returns Type Description string The code to insert | Improve this Doc View Source SetupEndMethod(MethodInfo, Type, string) Used to insert code at the end of the method Declaration string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type string returnValueName Local holder for the value returned by the function Returns Type Description string The code to insert | Improve this Doc View Source SetupExceptionMethod(MethodInfo, Type) Used to insert code within the catch portion of the try/catch portion of the method Declaration string SetupExceptionMethod(MethodInfo method, Type baseType) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type Returns Type Description string The code to insert | Improve this Doc View Source SetupInterfaces(Type) Used to set up any interfaces, extra fields, methods, etc. prior to overridding any methods. Declaration string SetupInterfaces(Type type) Parameters Type Name Description Type type Type of the object Returns Type Description string The code to insert | Improve this Doc View Source SetupStartMethod(MethodInfo, Type) Used to insert code at the beginning of the method Declaration string SetupStartMethod(MethodInfo method, Type baseType) Parameters Type Name Description MethodInfo method Overridding Method Type baseType Base type Returns Type Description string The code to insert"
  },
  "api/Aspectus.Module.AOPModule.html": {
    "href": "api/Aspectus.Module.AOPModule.html",
    "title": "Class AOPModule | Aspectus API Reference",
    "keywords": "Class AOPModule AOP module Inheritance object AOPModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Aspectus.Module Assembly: Aspectus.dll Syntax public class AOPModule : IModule Properties | Improve this Doc View Source Order Order to run it in Declaration public int Order { get; } Property Value Type Description int Methods | Improve this Doc View Source Load(IServiceCollection?) Loads the module Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper Bootstrapper to register with Implements IModule"
  },
  "api/Aspectus.Module.html": {
    "href": "api/Aspectus.Module.html",
    "title": "Namespace Aspectus.Module | Aspectus API Reference",
    "keywords": "Namespace Aspectus.Module Classes AOPModule AOP module"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Aspectus API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Aspectus API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes Registration Registration extension methods"
  },
  "api/Microsoft.Extensions.DependencyInjection.Registration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.Registration.html",
    "title": "Class Registration | Aspectus API Reference",
    "keywords": "Class Registration Registration extension methods Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Aspectus.dll Syntax public static class Registration Methods | Improve this Doc View Source RegisterAspectus(ICanisterConfiguration?) Registers the aspectus library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterAspectus(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Aspectus API Reference",
    "keywords": "Code using Aspectus.Interfaces; using Microsoft.CodeAnalysis; using Microsoft.Extensions.DependencyInjection; using System.Reflection; namespace Aspectus.Example; /// <summary> /// Example interface that will be implemented by the aspect /// </summary> public interface IExample { /// <summary> /// Example property that will be set by the aspect /// </summary> /// <value>Example property that will be set by the aspect</value> string MySecretData { get; set; } } /// <summary> /// Example class that will be modified by the aspect /// </summary> public class AOPTestClass { /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual string? A { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual int B { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual float C { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual List<string> D { get; set; } = new List<string>(); } /// <summary> /// Example application showing a basic example of how to use Aspectus /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Setup the service provider ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); if (ServiceProvider is null) return; Aspectus Aspectus = ServiceProvider.GetRequiredService<Aspectus>(); // Setup the aspectus system with the AOPTestClass type Aspectus.Setup(typeof(AOPTestClass)); // Create an instance of the AOPTestClass AOPTestClass Object = Aspectus.Create<AOPTestClass>(); // All the properties are the default values and work as normal. Console.WriteLine(Object.A); Console.WriteLine(Object.B); Console.WriteLine(Object.C); // Adding to the list works as normal. Object.D.Add(\"Test\"); Console.WriteLine(Object.D.First()); // However our aspect has added a new property and interface to the class and we can access it. Console.WriteLine((Object as IExample)?.MySecretData); } } /// <summary> /// Our aspect that will implement the interface /// </summary> /// <seealso cref=\"Aspectus.Interfaces.IAspect\"/> public class TestAspect : IAspect { /// <summary> /// Initializes a new instance of the <see cref=\"TestAspect\"/> class. /// </summary> public TestAspect() { // This is where we load the assemblies that we want to use. AssembliesUsing = new List<MetadataReference> { MetadataReference.CreateFromFile(typeof(TestAspect).GetTypeInfo().Assembly.Location) }; foreach (FileInfo? DLL in new FileInfo(typeof(object).GetTypeInfo().Assembly.Location).Directory .EnumerateFiles(\"*.dll\") .Where(x => Load.Contains(x.Name))) { PortableExecutableReference TempAssembly = MetadataReference.CreateFromFile(DLL.FullName); AssembliesUsing.Add(TempAssembly); } } /// <summary> /// Set of assemblies that the aspect requires /// </summary> public ICollection<MetadataReference> AssembliesUsing { get; } /// <summary> /// List of interfaces that need to be injected by this aspect /// </summary> public ICollection<Type> InterfacesUsing { get; } = new Type[] { typeof(IExample) }; /// <summary> /// Using statements that the aspect requires /// </summary> public ICollection<string> Usings { get; } = Array.Empty<string>(); /// <summary> /// The DLLs we want to load and use. /// </summary> private readonly string[] Load = { \"mscorlib.dll\", \"mscorlib.ni.dll\", \"System.Collections.Concurrent.dll\", \"System.Collections.dll\", \"System.Collections.Immutable.dll\", \"System.Runtime.dll\" }; /// <summary> /// Used to hook into the object once it has been created /// </summary> /// <param name=\"value\">Object created by the system</param> public void Setup(object value) { // We just want to set the property on the object to \"BLAH\" if (value is IExample ExampleValue) ExampleValue.MySecretData = \"BLAH\"; } /// <summary> /// Used to insert code into the default constructor /// </summary> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupDefaultConstructor(Type baseType) => \"\"; /// <summary> /// Used to insert code at the end of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <param name=\"returnValueName\">Local holder for the value returned by the function</param> /// <returns>The code to insert</returns> public string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) => \"\"; /// <summary> /// Used to insert code within the catch portion of the try/catch portion of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupExceptionMethod(MethodInfo method, Type baseType) => \"\"; /// <summary> /// Used to set up any interfaces, extra fields, methods, etc. prior to overridding any methods. /// </summary> /// <param name=\"type\">Type of the object</param> /// <returns>The code to insert</returns> public string SetupInterfaces(Type type) => \"public string MySecretData{get; set;}\"; /// <summary> /// Used to insert code at the beginning of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupStartMethod(MethodInfo method, Type baseType) => \"\"; } Output 0 0 Test BLAH"
  },
  "index.html": {
    "href": "index.html",
    "title": "Aspectus | Aspectus API Reference",
    "keywords": "Aspectus Aspectus is an advanced Aspect-Oriented Programming (AOP) library that simplifies the injection of cross-cutting concerns into your codebase. It empowers you to write clean and maintainable code by separating cross-cutting concerns from the core logic of your application. Key Features Easy Integration: Aspectus seamlessly integrates with your project by registering with the IoC (Inversion of Control) container during startup. Code Generation: Leveraging Roslyn, Aspectus generates code dynamically, allowing you to write expressive C# code for implementing aspects. Flexible Aspect Customization: Implement the IAspect interface to define custom logic for constructors, methods, and exception handling. AOP Modules: Aspectus supports modules, enabling you to consolidate and load setup code efficiently. NuGet Package: Install Aspectus easily through NuGet, simplifying the setup process for your projects. Installation To install Aspectus, use the NuGet package manager: Install-Package Aspectus Getting Started Follow these steps to start using Aspectus in your project: Register Aspectus with your IoC container during startup. Example code for ASP.NET Core: ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); Implement aspects by creating classes that inherit from the IAspect interface. Customize aspects based on your specific requirements, such as constructor setups, method injections, and exception handling. public class TestAspect : IAspect { // Implement your aspect logic here } Utilize Aspectus to create instances of types with injected aspects. var aspectus = ServiceProvider.GetRequiredService<Aspectus>(); aspectus.Setup(typeof(YourClass)); var item = aspectus.Create<YourClass>(); // Use and enjoy your enhanced object For a more detailed guide on using Aspectus, including advanced scenarios and AOP modules, refer to the Aspectus Documentation. Build Process To build Aspectus from source, ensure you have the following: Visual Studio 2022 .Net 6 Simply clone the repository and open the solution in Visual Studio. Contributing Contributions are welcome! To contribute to Aspectus, please follow these steps: Fork the repository. Create your feature branch: git checkout -b feature/YourFeature. Commit your changes: git commit -am 'Add YourFeature'. Push to the branch: git push origin feature/YourFeature. Submit a pull request. Please ensure your code follows the existing coding style and includes appropriate tests. Additionally, make sure to update the documentation as needed."
  }
}