{
  "api/Aspectus.Aspectus.html": {
    "href": "api/Aspectus.Aspectus.html",
    "title": "Class Aspectus | Aspectus API Reference",
    "keywords": "Class Aspectus Namespace Aspectus Assembly Aspectus.dll AOP interface manager public class Aspectus Inheritance object Aspectus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Aspectus(Compiler, IEnumerable<IAspect>, IEnumerable<IAOPModule>) Initializes a new instance of the Aspectus class. public Aspectus(Compiler compiler, IEnumerable<IAspect> aspects, IEnumerable<IAOPModule> modules) Parameters compiler Compiler The compiler. aspects IEnumerable<IAspect> The aspects. modules IEnumerable<IAOPModule> The modules. Aspectus(Compiler, IEnumerable<IAspect>, IEnumerable<IAOPModule>, ILogger<Aspectus>?, ObjectPool<StringBuilder>?) Initializes a new instance of the Aspectus class. public Aspectus(Compiler compiler, IEnumerable<IAspect> aspects, IEnumerable<IAOPModule> modules, ILogger<Aspectus>? logger, ObjectPool<StringBuilder>? objectPool) Parameters compiler Compiler The compiler. aspects IEnumerable<IAspect> The aspects. modules IEnumerable<IAOPModule> The modules. logger ILogger<Aspectus> Serilog based log object objectPool ObjectPool<StringBuilder> The object pool. Exceptions ArgumentNullException logger Methods Create(Type) Creates an object of the specified base type, registering the type if necessary public object? Create(Type baseType) Parameters baseType Type The base type Returns object Returns an object of the specified base type Create<T>() Creates an object of the specified base type, registering the type if necessary public T Create<T>() Returns T Returns an object of the specified base type Type Parameters T The base type FinalizeSetup() Cleans up items in this instance. public void FinalizeSetup() Setup(params Assembly[]) Sets up all types from the assembly that it can public void Setup(params Assembly[] assemblies) Parameters assemblies Assembly[] Assembly to set up Setup(params Type[]) Sets up a type so it can be used in the system later public void Setup(params Type[] types) Parameters types Type[] The types. ToString() Outputs manager info as a string public override string ToString() Returns string String version of the manager"
  },
  "api/Aspectus.CodeGen.BaseClasses.CompilerBase.html": {
    "href": "api/Aspectus.CodeGen.BaseClasses.CompilerBase.html",
    "title": "Class CompilerBase | Aspectus API Reference",
    "keywords": "Class CompilerBase Namespace Aspectus.CodeGen.BaseClasses Assembly Aspectus.dll Compiler base class public abstract class CompilerBase : IDisposable Inheritance object CompilerBase Implements IDisposable Derived Compiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CompilerBase(string, ObjectPool<StringBuilder>?) Constructor protected CompilerBase(string assemblyName, ObjectPool<StringBuilder>? objectPool = null) Parameters assemblyName string Assembly name to save the generated types as objectPool ObjectPool<StringBuilder> The object pool. Properties AssemblyName Assembly name public string AssemblyName { get; } Property Value string AssemblyStream Gets the assembly stream. protected MemoryStream? AssemblyStream { get; } Property Value MemoryStream The assembly stream. Classes Dictionary containing generated types and associates it with original type public List<Type> Classes { get; } Property Value List<Type> Optimize Should this be optimized? protected bool Optimize { get; } Property Value bool Methods Add(string, IEnumerable<string>, params MetadataReference[]) Adds the specified code. protected CompilerBase Add(string code, IEnumerable<string> usings, params MetadataReference[] references) Parameters code string The code. usings IEnumerable<string> The usings. references MetadataReference[] The references. Returns CompilerBase This Compile() Compiles this instance. public CompilerBase Compile() Returns CompilerBase This Exceptions Exception Any errors that are sent back by Roslyn Create<T>(Type, params object[]) Creates an object using the type specified protected static T Create<T>(Type typeToCreate, params object[] args) Parameters typeToCreate Type Type to create args object[] Args to pass to the constructor Returns T The created object Type Parameters T Type to cast to Exceptions ArgumentNullException typeToCreate Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. LoadAssembly() Loads the assembly into memory. public IEnumerable<Type> LoadAssembly() Returns IEnumerable<Type> The types within the assembly ToString() Outputs basic information about the compiler as a string public override string ToString() Returns string The string version of the compiler"
  },
  "api/Aspectus.CodeGen.BaseClasses.html": {
    "href": "api/Aspectus.CodeGen.BaseClasses.html",
    "title": "Namespace Aspectus.CodeGen.BaseClasses | Aspectus API Reference",
    "keywords": "Namespace Aspectus.CodeGen.BaseClasses Classes CompilerBase Compiler base class"
  },
  "api/Aspectus.CodeGen.Compiler.html": {
    "href": "api/Aspectus.CodeGen.Compiler.html",
    "title": "Class Compiler | Aspectus API Reference",
    "keywords": "Class Compiler Namespace Aspectus.CodeGen Assembly Aspectus.dll Compiler public class Compiler : CompilerBase, IDisposable Inheritance object CompilerBase Compiler Implements IDisposable Inherited Members CompilerBase.AssemblyName CompilerBase.Classes CompilerBase.AssemblyStream CompilerBase.Optimize CompilerBase.Compile() CompilerBase.Dispose() CompilerBase.LoadAssembly() CompilerBase.ToString() CompilerBase.Create<T>(Type, params object[]) CompilerBase.Add(string, IEnumerable<string>, params MetadataReference[]) CompilerBase.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Compiler() Initializes a new instance of the Compiler class. public Compiler() Compiler(ObjectPool<StringBuilder>?) Initializes a new instance of the Compiler class. public Compiler(ObjectPool<StringBuilder>? objectPool) Parameters objectPool ObjectPool<StringBuilder> The object pool. Compiler(string) Constructor public Compiler(string assemblyName) Parameters assemblyName string Assembly name Compiler(string, ObjectPool<StringBuilder>?) Constructor public Compiler(string assemblyName, ObjectPool<StringBuilder>? objectPool) Parameters assemblyName string Assembly name objectPool ObjectPool<StringBuilder> The object pool. Methods Create(string, IEnumerable<string>, params MetadataReference[]) Compiles the specified code and returns the types that are created public Compiler Create(string code, IEnumerable<string> usings, params MetadataReference[] references) Parameters code string The code. usings IEnumerable<string> The usings. references MetadataReference[] The references. Returns Compiler The list of types that are generated"
  },
  "api/Aspectus.CodeGen.html": {
    "href": "api/Aspectus.CodeGen.html",
    "title": "Namespace Aspectus.CodeGen | Aspectus API Reference",
    "keywords": "Namespace Aspectus.CodeGen Classes Compiler Compiler"
  },
  "api/Aspectus.Interfaces.IAOPModule.html": {
    "href": "api/Aspectus.Interfaces.IAOPModule.html",
    "title": "Interface IAOPModule | Aspectus API Reference",
    "keywords": "Interface IAOPModule Namespace Aspectus.Interfaces Assembly Aspectus.dll AOP module interface public interface IAOPModule Methods Setup(Aspectus) Used to add a class to the AOP system void Setup(Aspectus manager) Parameters manager Aspectus AOP manager"
  },
  "api/Aspectus.Interfaces.IAspect.html": {
    "href": "api/Aspectus.Interfaces.IAspect.html",
    "title": "Interface IAspect | Aspectus API Reference",
    "keywords": "Interface IAspect Namespace Aspectus.Interfaces Assembly Aspectus.dll Aspect interface public interface IAspect Properties AssembliesUsing Set of assemblies that the aspect requires ICollection<MetadataReference> AssembliesUsing { get; } Property Value ICollection<MetadataReference> InterfacesUsing List of interfaces that need to be injected by this aspect ICollection<Type> InterfacesUsing { get; } Property Value ICollection<Type> Usings Using statements that the aspect requires ICollection<string> Usings { get; } Property Value ICollection<string> Methods Setup(object) Used to hook into the object once it has been created void Setup(object value) Parameters value object Object created by the system SetupDefaultConstructor(Type) Used to insert code into the default constructor string SetupDefaultConstructor(Type baseType) Parameters baseType Type Base type Returns string The code to insert SetupEndMethod(MethodInfo, Type, string) Used to insert code at the end of the method string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) Parameters method MethodInfo Overridding Method baseType Type Base type returnValueName string Local holder for the value returned by the function Returns string The code to insert SetupExceptionMethod(MethodInfo, Type) Used to insert code within the catch portion of the try/catch portion of the method string SetupExceptionMethod(MethodInfo method, Type baseType) Parameters method MethodInfo Overridding Method baseType Type Base type Returns string The code to insert SetupInterfaces(Type) Used to set up any interfaces, extra fields, methods, etc. prior to overridding any methods. string SetupInterfaces(Type type) Parameters type Type Type of the object Returns string The code to insert SetupStartMethod(MethodInfo, Type) Used to insert code at the beginning of the method string SetupStartMethod(MethodInfo method, Type baseType) Parameters method MethodInfo Overridding Method baseType Type Base type Returns string The code to insert"
  },
  "api/Aspectus.Interfaces.html": {
    "href": "api/Aspectus.Interfaces.html",
    "title": "Namespace Aspectus.Interfaces | Aspectus API Reference",
    "keywords": "Namespace Aspectus.Interfaces Interfaces IAOPModule AOP module interface IAspect Aspect interface"
  },
  "api/Aspectus.Module.AOPModule.html": {
    "href": "api/Aspectus.Module.AOPModule.html",
    "title": "Class AOPModule | Aspectus API Reference",
    "keywords": "Class AOPModule Namespace Aspectus.Module Assembly Aspectus.dll AOP module public class AOPModule : IModule Inheritance object AOPModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run it in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection Bootstrapper to register with"
  },
  "api/Aspectus.Module.html": {
    "href": "api/Aspectus.Module.html",
    "title": "Namespace Aspectus.Module | Aspectus API Reference",
    "keywords": "Namespace Aspectus.Module Classes AOPModule AOP module"
  },
  "api/Aspectus.html": {
    "href": "api/Aspectus.html",
    "title": "Namespace Aspectus | Aspectus API Reference",
    "keywords": "Namespace Aspectus Classes Aspectus AOP interface manager"
  },
  "api/Microsoft.Extensions.DependencyInjection.Registration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.Registration.html",
    "title": "Class Registration | Aspectus API Reference",
    "keywords": "Class Registration Namespace Microsoft.Extensions.DependencyInjection Assembly Aspectus.dll Registration extension methods public static class Registration Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterAspectus(ICanisterConfiguration?) Registers the aspectus library with the bootstrapper. public static ICanisterConfiguration? RegisterAspectus(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Aspectus API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes Registration Registration extension methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Aspectus API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Aspectus API Reference",
    "keywords": "Code using Aspectus.Interfaces; using Microsoft.CodeAnalysis; using Microsoft.Extensions.DependencyInjection; using System.Reflection; namespace Aspectus.Example; /// <summary> /// Example interface that will be implemented by the aspect /// </summary> public interface IExample { /// <summary> /// Example property that will be set by the aspect /// </summary> /// <value>Example property that will be set by the aspect</value> string MySecretData { get; set; } } /// <summary> /// Example class that will be modified by the aspect /// </summary> public class AOPTestClass { /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual string? A { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual int B { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual float C { get; set; } /// <summary> /// Example property. In order to override it, the property must be virtual. Note that the /// system will skip non virtual properties. /// </summary> public virtual List<string> D { get; set; } = new List<string>(); } /// <summary> /// Example application showing a basic example of how to use Aspectus /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Setup the service provider ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); if (ServiceProvider is null) return; Aspectus Aspectus = ServiceProvider.GetRequiredService<Aspectus>(); // Setup the aspectus system with the AOPTestClass type Aspectus.Setup(typeof(AOPTestClass)); // Create an instance of the AOPTestClass AOPTestClass Object = Aspectus.Create<AOPTestClass>(); // All the properties are the default values and work as normal. Console.WriteLine(Object.A); Console.WriteLine(Object.B); Console.WriteLine(Object.C); // Adding to the list works as normal. Object.D.Add(\"Test\"); Console.WriteLine(Object.D[0]); // However our aspect has added a new property and interface to the class and we can access it. Console.WriteLine((Object as IExample)?.MySecretData); } } /// <summary> /// Our aspect that will implement the interface /// </summary> /// <seealso cref=\"Aspectus.Interfaces.IAspect\"/> public class TestAspect : IAspect { /// <summary> /// Initializes a new instance of the <see cref=\"TestAspect\"/> class. /// </summary> public TestAspect() { // This is where we load the assemblies that we want to use. AssembliesUsing = new List<MetadataReference> { MetadataReference.CreateFromFile(typeof(TestAspect).GetTypeInfo().Assembly.Location) }; foreach (FileInfo? DLL in new FileInfo(typeof(object).GetTypeInfo().Assembly.Location).Directory .EnumerateFiles(\"*.dll\") .Where(x => _Load.Contains(x.Name))) { PortableExecutableReference TempAssembly = MetadataReference.CreateFromFile(DLL.FullName); AssembliesUsing.Add(TempAssembly); } } /// <summary> /// Set of assemblies that the aspect requires /// </summary> public ICollection<MetadataReference> AssembliesUsing { get; } /// <summary> /// List of interfaces that need to be injected by this aspect /// </summary> public ICollection<Type> InterfacesUsing { get; } = new Type[] { typeof(IExample) }; /// <summary> /// Using statements that the aspect requires /// </summary> public ICollection<string> Usings { get; } = Array.Empty<string>(); /// <summary> /// The DLLs we want to load and use. /// </summary> private readonly string[] _Load = { \"mscorlib.dll\", \"mscorlib.ni.dll\", \"System.Collections.Concurrent.dll\", \"System.Collections.dll\", \"System.Collections.Immutable.dll\", \"System.Runtime.dll\" }; /// <summary> /// Used to hook into the object once it has been created /// </summary> /// <param name=\"value\">Object created by the system</param> public void Setup(object value) { // We just want to set the property on the object to \"BLAH\" if (value is IExample ExampleValue) ExampleValue.MySecretData = \"BLAH\"; } /// <summary> /// Used to insert code into the default constructor /// </summary> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupDefaultConstructor(Type baseType) => \"\"; /// <summary> /// Used to insert code at the end of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <param name=\"returnValueName\">Local holder for the value returned by the function</param> /// <returns>The code to insert</returns> public string SetupEndMethod(MethodInfo method, Type baseType, string returnValueName) => \"\"; /// <summary> /// Used to insert code within the catch portion of the try/catch portion of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupExceptionMethod(MethodInfo method, Type baseType) => \"\"; /// <summary> /// Used to set up any interfaces, extra fields, methods, etc. prior to overridding any methods. /// </summary> /// <param name=\"type\">Type of the object</param> /// <returns>The code to insert</returns> public string SetupInterfaces(Type type) => \"public string MySecretData{get; set;}\"; /// <summary> /// Used to insert code at the beginning of the method /// </summary> /// <param name=\"method\">Overridding Method</param> /// <param name=\"baseType\">Base type</param> /// <returns>The code to insert</returns> public string SetupStartMethod(MethodInfo method, Type baseType) => \"\"; } Output 0 0 Test BLAH"
  },
  "index.html": {
    "href": "index.html",
    "title": "Aspectus | Aspectus API Reference",
    "keywords": "Aspectus Aspectus is an advanced Aspect-Oriented Programming (AOP) library that simplifies the injection of cross-cutting concerns into your codebase. It empowers you to write clean and maintainable code by separating cross-cutting concerns from the core logic of your application. Key Features Easy Integration: Aspectus seamlessly integrates with your project by registering with the IoC (Inversion of Control) container during startup. Code Generation: Leveraging Roslyn, Aspectus generates code dynamically, allowing you to write expressive C# code for implementing aspects. Flexible Aspect Customization: Implement the IAspect interface to define custom logic for constructors, methods, and exception handling. AOP Modules: Aspectus supports modules, enabling you to consolidate and load setup code efficiently. NuGet Package: Install Aspectus easily through NuGet, simplifying the setup process for your projects. Installation To install Aspectus, use the NuGet package manager: Install-Package Aspectus Getting Started Follow these steps to start using Aspectus in your project: Register Aspectus with your IoC container during startup. Example code for ASP.NET Core: ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); Implement aspects by creating classes that inherit from the IAspect interface. Customize aspects based on your specific requirements, such as constructor setups, method injections, and exception handling. public class TestAspect : IAspect { // Implement your aspect logic here } Utilize Aspectus to create instances of types with injected aspects. var aspectus = ServiceProvider.GetRequiredService<Aspectus>(); aspectus.Setup(typeof(YourClass)); var item = aspectus.Create<YourClass>(); // Use and enjoy your enhanced object For a more detailed guide on using Aspectus, including advanced scenarios and AOP modules, refer to the Aspectus Documentation. Build Process To build Aspectus from source, ensure you have the following: Visual Studio 2022 .Net 6 Simply clone the repository and open the solution in Visual Studio. Contributing Contributions are welcome! To contribute to Aspectus, please follow these steps: Fork the repository. Create your feature branch: git checkout -b feature/YourFeature. Commit your changes: git commit -am 'Add YourFeature'. Push to the branch: git push origin feature/YourFeature. Submit a pull request. Please ensure your code follows the existing coding style and includes appropriate tests. Additionally, make sure to update the documentation as needed."
  }
}